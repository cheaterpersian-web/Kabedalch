generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
  consultant
}

enum OrderStatus {
  pending
  paid
  failed
  cancelled
}

enum TestType {
  liver
  alcohol
}

model User {
  id                 String      @id @default(uuid())
  name               String
  family             String
  phone              String      @unique
  email              String      @unique
  passwordHash       String
  role               UserRole    @default(user)
  totpSecret         String?     // for optional 2FA
  refreshTokenHash   String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  testResults        TestResult[]
  orders             Order[]
  posts              Post[]      @relation("PostAuthor")
  logs               Log[]
}

model Package {
  id            String    @id @default(uuid())
  title         String
  description   String
  priceIRR      Int
  durationDays  Int
  features      Json
  tags          String[]
  discountIRR   Int?      // optional discount amount in IRR
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  orders        Order[]
}

model TestTemplate {
  id           String   @id @default(uuid())
  type         TestType
  name         String
  questions    Json
  scoringLogic Json
  createdAt    DateTime @default(now())
}

model TestResult {
  id                     String   @id @default(uuid())
  user                   User?    @relation(fields: [userId], references: [id])
  userId                 String?
  test                   TestTemplate @relation(fields: [testId], references: [id])
  testId                 String
  answers                Json
  score                  Int
  grade                  String
  recommendedPackage     Package? @relation(fields: [recommendedPackageId], references: [id])
  recommendedPackageId   String?
  createdAt              DateTime @default(now())
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  package     Package     @relation(fields: [packageId], references: [id])
  packageId   String
  amountIRR   Int
  currency    String      @default("IRR")
  status      OrderStatus @default(pending)
  paymentId   String?
  authority   String?     // payment authority/tracking
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Testimonial {
  id                   String   @id @default(uuid())
  userName             String
  phoneMasked          String
  phoneFullEncrypted   String?
  message              String
  imageBeforeUrl       String?
  imageAfterUrl        String?
  approved             Boolean  @default(false)
  createdAt            DateTime @default(now())
}

model Post {
  id         String   @id @default(uuid())
  title      String
  slug       String   @unique
  content    String
  author     User     @relation("PostAuthor", fields: [authorId], references: [id])
  authorId   String
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Setting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Webhook {
  id        String   @id @default(uuid())
  provider  String
  payload   Json
  status    String
  createdAt DateTime @default(now())
}

model Log {
  id        String   @id @default(uuid())
  actor     User?    @relation(fields: [actorId], references: [id])
  actorId   String?
  action    String
  entity    String
  entityId  String?
  diff      Json?
  createdAt DateTime @default(now())
}

model Consultation {
  id                 String   @id @default(uuid())
  name               String
  phoneMasked        String
  phoneFullEncrypted String?
  email              String?
  description        String
  preferredTime      String?
  status             String   @default("new")
  createdAt          DateTime @default(now())
}

model Page {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Slider {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String
  linkUrl   String?
  createdAt DateTime @default(now())
}
